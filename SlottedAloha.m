% ############### ACKNOWLEDGEMENTS & CREDITS ##############################
% Developed By: PAARTH BHASIN and JASON WIJAYA
% Date: 07/05/2017
% Purpose: To study the effects of the Slotted ALOHA MAC protocol by simulating
%          it, determining S vs G and then compare it to the theoretical result
% Subject: ECE3141 Information and Networks, Mini Project
% Lecturers: Mike Biggar and Gayathri Kongara
% References: Simulation algorithm based on:
% http://au.mathworks.com/matlabcentral/fileexchange/3834-home-networking-basis?focused=5049813&tab=function
%--------------------------------------------------------------------------
% Usage: run SlottedAloha.m
% Set the following inputs: 
%   stations: number of stations, 
%   tranmissionProb: probability of transmission of frame, 
%   max_backoff: maximum backoff time, 
%   simulationTime: simulation time for the protocol, 
%   Output: output check value
% The closest results were got from the following set of values:
% [200, 0.0057, 100, 5000, true/false(irrelevant)]
% #################### PROGRAM DESCRIPTION ###############################
% Function SlottedAloha(stations, transmissionProb, max_backoff,
% simulationTime, Output)
%
% - This function simulates the Slotted Aloha MAC Protocol for a given number
%   of transmitting stations. It generates two graphs depicting S vs G 
%   (Throughput vs Load), one showing the theoretical output and the other 
%   showing the output observed.
%
% - As expected, throughput decreases on high traffic, as most of packets
%   keep colliding, resulting in failed transmissions (low throughput).
%
% - It takes 5 inputs, as described below.
%
% #################### PROGRAM INPUT PARAMETERS ##########################
%
% stations (A positive integer): Refer to the number of stations that transmit frames.
%
% transmissionProb (A real number, [0,1]): The probability that a given station is
% ready to transmit a frame in any time slot.
%
% max_backoff (A positive integer): The maximum backoff time that a station
% must wait before trying to transmit a frame again. This is used to
% resolve collisions.
%
% simulationTime (A positive integer): The duration of the simulation of 
% this MAC protocol in time slots.
%
% Output (boolean value [true, false]): Boolean value for printing the final observed function
% output if value set to true. Default value is set to false.
%
% ####################### PROGRAM OUTPUTS ################################
%
% throughput: Actual/Observed throughput of the slotted aloha random access protocol
%             It is normalized by using the acknowledged frames by
%             time slots passed ratio.
%
% meanDelay: The average amount of delay (in time slots) that each frame 
%            requires to be successfully transmitted (acknowledged) from 
%            the time it was ready to be tranmsitted.
%
% trafficOffered: Represents the value G (Load). It refers to the amount of
%                 load/taffic being generated by different stations. Each of
%                 the stations transmitting together increase the load, while
%                 not doing so decreases the load. It is the number of
%                 frames ready to be transmitted by different stations or the
%                 amount of the frames arriving per second into the medium 
%                 for being transmitted.
%                 
%
% collisionProb: Probability that a frame collides with another
%                during any given time slot
% -------------------------------------------------------------------------
clc; % Clear the console window
stations = 200;
transmissionProb = 0.0057;
max_backoff = 100;
simulationTime = 5000;
stationStatus = zeros(1,stations); % Initially all stations are idle
% Is the station idle? Ready to transmit? Waiting for BackOff time?
%
% The following values describe the current status of any station :
% 0: Station has no frame to be transmitted (idle)
%
% 1: Station has a frame to be transmitted, either because new data must be 
%    sent or a previously collided packet has waited the backoff time
%
% >1: source is backlogged due to previous packets collision, the value of 
%     the status equals the number of slots it must wait for the next transmission attempt

stationBackoffTime = zeros(1,stations); % Random amount of time station must backoff to resolve collision
transmissionAttempts = 0; % Number of transmission attempts in total of all stations
acknowledgedDelay = zeros(1,simulationTime);
acknowledgedFrameCount = 0; % Total number of frames that have been successfully transmitted.
frameCollisions = 0; % Total number of collisions that have occured till now.
frameCreationTime = zeros(1,stations); % Time (t) when frame was generated
currentTimeSlot = 0; % We start at time t = 1 to t = 5000
count = 0; % flag to keep track of current load and throughput for each time slot
x1 = zeros(1, stations); % Load (G) at different timeslots
y1 = zeros(1, stations); % Throughput (S) at the corresponding Load.

% We only run for a finite/simulated time, to study Slotted Aloha protocol. 
% In reality this is an infinite never-ending loop.
while currentTimeSlot < simulationTime 
    currentTimeSlot = currentTimeSlot + 1; % Increment time slot

    for currStation = 1:length(stationStatus) % For all stations
        if stationStatus(1,currStation) == 0 && rand(1) <= transmissionProb % new frame generated if conditions met
            stationStatus(1,currStation) = 1; % Ready to be transmitted
            stationBackoffTime(1,currStation) = randi(max_backoff,1); % Backoff time in case collision occurs
            frameCreationTime(1,currStation) = currentTimeSlot; % Storing the creation time of this frame
        elseif stationStatus(1,currStation) == 1 % backlogged packet
            stationBackoffTime(1,currStation) = randi(max_backoff,1);
        end
        % The third case would be that the station is idle and its
        % tranmission robability doesn't allow it to transmit this time
        % We don't do anything in that case.
    end

    transmissionAttempts = transmissionAttempts + sum(stationStatus == 1);

    if sum(stationStatus == 1) == 1 % Frame can successfully be transmitted without collision
    % We transmit only if no collisions are happening, in other words no other station is
    % transmitting in current time slot.
        acknowledgedFrameCount = acknowledgedFrameCount + 1;
        [~,stationId] = find(stationStatus == 1); % Extract the station which is transmitting
        acknowledgedDelay(acknowledgedFrameCount) = currentTimeSlot - frameCreationTime(stationId);
    elseif sum(stationStatus == 1) > 1 % More than one stations are trying to transmit at the same time
        % Results in collision
        frameCollisions = frameCollisions + 1; % Incrementing the collisions occured
        stationStatus  = stationStatus + stationBackoffTime;  
        % Make all the stations wait their corresponding backoff times.
        % Case 3 on line 93 won't be affected since those stations were
        % idle and were not transmitting anything (their backoff time is 0).
    end

    stationStatus = stationStatus - 1; % Decrease the backoff time. Case 3 becomes negative
    stationStatus(stationStatus < 0) = 0; % idle sources stay idle (only permitted status values allowed)
    stationBackoffTime = zeros(1,stations); % Reset all backoff time values as they have been recorded
    
    loadPresent = transmissionAttempts / currentTimeSlot; % Load (G)
    
    if acknowledgedFrameCount == 0
        meanDelay = simulationTime; 
        % Theoretically, if frames collide continously, the delay tends to
        % infinity, because the simulation is continuous. In our case it
        % restricted to be just a small time duration.
    else
        meanDelay = mean(acknowledgedDelay(1:acknowledgedFrameCount)); 
        % Calculate the mean delay from the delays of each individual acknowledged frames. 
    end
    
    throughput = acknowledgedFrameCount / currentTimeSlot; % Normalized thoughput
    collisionProb = frameCollisions / currentTimeSlot; % Normalized collision probability of each frame
    
    count = count + 1; % Incrementing flag counter
    x1(1, count) = loadPresent; %Load
    y1(1, count) = throughput;  %Throughput on given load
    
end

loadPresent = (transmissionAttempts / currentTimeSlot); % Final normalized load

% Final average delay/time for being acknowledged.
if acknowledgedFrameCount == 0
    meanDelay = simulationTime;
    % Theoretically, if packets collide continously, the delay tends to 
    % infinity.
    % But since our simulation time is limited to a finite number, the
    % frame transfer is only captured in this duration, hence the maximum
    % delay is also equal to the simulation time.
else
    meanDelay = mean(acknowledgedDelay(1:acknowledgedFrameCount));
end

throughput = (acknowledgedFrameCount / currentTimeSlot); % Final Normalized throughput
collisionProb = (frameCollisions / currentTimeSlot); % Final normalized collision probability

if exist('Output','var') && Output == 1 % Does the user want to see the statistics of this simulation?
    fprintf('\nLoad/Channel Traffic (G): %.3f,\nThroughput (S): %.3f,\nMean delay (D): %.2f slots,\nCollision probability (p): %.3f.\n',loadPresent,throughput,meanDelay,collisionProb);
end


w3=x1.*exp(-x1); % Theoretical value of throughput
figure(2) % First figure/graph
plot(x1, y1, '-')
title('Slotted Aloha - Observed S vs G graph ')
grid
xlabel('Offered Traffic (G)(bps)')
ylabel('Throughput (S)(bps)')
figure; % Second figure/graph
plot(x1, w3, '-') % Observed value of throughput
title('Slotted Aloha - Theoretical S vs G graph ')
grid
xlabel('Offered Traffic (G)(bps)')
ylabel('Throughput (S)(bps)')
